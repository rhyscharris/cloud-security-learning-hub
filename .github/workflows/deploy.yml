name: Deploy to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # Required for Bandit upload-sarif

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: prod-cslh
  K8S_NAMESPACE: prod-cslh-namespace


jobs:
  # -------------------------------
  # Step 1: Run Security Checks
  # -------------------------------
  security-checks:
    runs-on: ubuntu-latest
    name: Run Security Checks

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Ruff - Fast Python linter and security checker
    # Enforces Bandit-style rules (e.g., eval, exec) using the 'B' rule set
    # Should fail the CI if any issues are found, including eval() use in auth.py

    - name: Install Ruff
      run: pip install ruff

    - name: Run Ruff and generate SARIF
      run: |
        ruff --version
        ruff check app/ --output-format=sarif > results.sarif || ruff check app/ --format=sarif > results.sarif

    - name: Upload SARIF to GitHub
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif

  # -------------------------------------------------
  # Step 2: Build, Scan, and Deploy to EKS
  # -------------------------------------------------
  build-and-deploy:
    name: Build, Scan, and Deploy to EKS
    runs-on: ubuntu-latest
    needs: security-checks  # Will only run if security checks pass

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update Kubernetes manifests
      run: |
        # Replace the image tag in deployment.yaml with the new image
        sed -i "s|050451363468.dkr.ecr.us-east-2.amazonaws.com/prod-cslh:latest|${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}|" kubernetes/kubernetes-test-deployment.yaml

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name prod-cloud-security-learning-hub-cluster --region ${{ env.AWS_REGION }}
        # Debug - check the current context and cluster info
        kubectl config current-context
        kubectl cluster-info

    - name: Create K8s Secret
      run: |
        kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f - --validate=false

        kubectl create secret generic prod-cslh-app-secret \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --from-literal=MONGO_USERNAME='${{ secrets.MONGO_USERNAME }}' \
          --from-literal=MONGO_PASSWORD='${{ secrets.MONGO_PASSWORD }}' \
          --from-literal=SECRET_KEY='${{ secrets.SECRET_KEY }}' \
          --from-literal=MONGODB_URI=${{ secrets.MONGODB_URI }} \
          --dry-run=client -o yaml | kubectl apply -f - --validate=false

    - name: Deploy to EKS
      run: |
        kubectl apply -f kubernetes/kubernetes-test-deployment.yaml --validate=false
        kubectl apply -f kubernetes/kubernetes-test-service.yaml --validate=false

    - name: Apply ClusterAdmin RoleBinding
      run: |
        kubectl apply -f kubernetes/prod-cslh-cluster-admin.yaml --validate=false